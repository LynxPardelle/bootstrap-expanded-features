var bootstrapExpandedFeatures;
(() => {
  "use strict";
  var __webpack_modules__ = {
      440: (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        eval(
          '// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  HSLToRGB: () => (/* binding */ HSLToRGB),\n  HWBToRGB: () => (/* binding */ HWBToRGB),\n  HexToRGB: () => (/* binding */ HexToRGB),\n  RGBToRGBA: () => (/* binding */ RGBToRGBA),\n  befysize: () => (/* binding */ befysize),\n  camelToCSSValid: () => (/* binding */ camelToCSSValid),\n  changeDebugOption: () => (/* binding */ changeDebugOption),\n  changeImportantActive: () => (/* binding */ changeImportantActive),\n  changeUseTimerOption: () => (/* binding */ changeUseTimerOption),\n  clearAllColors: () => (/* binding */ clearAllColors),\n  colorToRGB: () => (/* binding */ colorToRGB),\n  consoleLog: () => (/* binding */ consoleLog),\n  consoleParser: () => (/* binding */ consoleParser),\n  createCSSRules: () => (/* binding */ createCSSRules),\n  cssCreate: () => (/* binding */ src_cssCreate),\n  cssValidToCamel: () => (/* binding */ cssValidToCamel),\n  deleteColor: () => (/* binding */ deleteColor),\n  functions: () => (/* binding */ functions),\n  getAbreviationsClasses: () => (/* binding */ getAbreviationsClasses),\n  getAbreviationsValues: () => (/* binding */ getAbreviationsValues),\n  getAlreadyCreatedClasses: () => (/* binding */ getAlreadyCreatedClasses),\n  getBPS: () => (/* binding */ getBPS),\n  getColorValue: () => (/* binding */ getColorValue),\n  getColors: () => (/* binding */ getColors),\n  getColorsNames: () => (/* binding */ getColorsNames),\n  getCombos: () => (/* binding */ getCombos),\n  getCssNamesParsed: () => (/* binding */ getCssNamesParsed),\n  getSheet: () => (/* binding */ getSheet),\n  parseRGB: () => (/* binding */ parseRGB),\n  pushAbreviationsClasses: () => (/* binding */ pushAbreviationsClasses),\n  pushAbreviationsValues: () => (/* binding */ pushAbreviationsValues),\n  pushBPS: () => (/* binding */ pushBPS),\n  pushColors: () => (/* binding */ pushColors),\n  pushCombos: () => (/* binding */ pushCombos),\n  pushCssNamesParsed: () => (/* binding */ pushCssNamesParsed),\n  service: () => (/* binding */ service),\n  setTimeBetweenReCreate: () => (/* binding */ setTimeBetweenReCreate),\n  shadeTintColor: () => (/* binding */ shadeTintColor),\n  unbefysize: () => (/* binding */ unbefysize),\n  updateAbreviationsClass: () => (/* binding */ updateAbreviationsClass),\n  updateAbreviationsValue: () => (/* binding */ updateAbreviationsValue),\n  updateClasses: () => (/* binding */ updateClasses),\n  updateColor: () => (/* binding */ updateColor),\n  updateCombo: () => (/* binding */ updateCombo),\n  updateCssNamesParsed: () => (/* binding */ updateCssNamesParsed),\n  values: () => (/* binding */ src_values)\n});\n\n;// CONCATENATED MODULE: ./src/values/colors.ts\nconst allColors = {\n    primary: "#0d6efd",\n    secondary: "#6c757d",\n    success: "#198754",\n    info: "#0dcaf0",\n    warning: "#ffc107",\n    danger: "#dc3545",\n    light: "#f8f9fa",\n    dark: "#212529",\n    indigoBS: "#6610f2",\n    purpleBS: "#6f42c1",\n    pinkBS: "#d63384",\n    orangeBS: "#fd7e14",\n    tealBS: "#20c997",\n    white: "#fff",\n    grayBS: "#6c757d",\n    mystic: "#210020",\n    lavenderLP: "#D6BCFF",\n    fairy: "#D680FF",\n    summer: "#FF9A2E",\n    old: "#EEEDA0",\n    friend: "#3BBBB2",\n    tree: "#5A311D",\n    blood: "#8A0707",\n    beast: "#F5785D",\n    abyss: "#000",\n    black: "#000000",\n    silver: "#C0C0C0",\n    gray: "#808080",\n    maroon: "#800000",\n    red: "#FF0000",\n    purple: "#800080",\n    fuchsia: "#FF00FF",\n    green: "#008000",\n    lime: "#00FF00",\n    olive: "#808000",\n    yellow: "#FFFF00",\n    navy: "#000080",\n    blue: "#0000FF",\n    teal: "#008080",\n    aqua: "#00FFFF",\n    aliceblue: "#f0f8ff",\n    antiquewhite: "#faebd7",\n    aquamarine: "#7fffd4",\n    azure: "#f0ffff",\n    beige: "#f5f5dc",\n    bisque: "#ffe4c4",\n    blanchedalmond: "#ffebcd",\n    blueviolet: "#8a2be2",\n    brown: "#a52a2a",\n    burlywood: "#deb887",\n    cadetblue: "#5f9ea0",\n    chartreuse: "#7fff00",\n    chocolate: "#d2691e",\n    coral: "#ff7f50",\n    cornflowerblue: "#6495ed",\n    cornsilk: "#fff8dc",\n    crimson: "#dc143c",\n    cyan: "#00ffff",\n    darkblue: "#00008b",\n    darkcyan: "#008b8b",\n    darkgoldenrod: "#b8860b",\n    darkgray: "#a9a9a9",\n    darkgreen: "#006400",\n    darkgrey: "#a9a9a9",\n    darkkhaki: "#bdb76b",\n    darkmagenta: "#8b008b",\n    darkolivegreen: "#556b2f",\n    darkorange: "#ff8c00",\n    darkorchid: "#9932cc",\n    darkred: "#8b0000",\n    darksalmon: "#e9967a",\n    darkseagreen: "#8fbc8f",\n    darkslateblue: "#483d8b",\n    darkslategray: "#2f4f4f",\n    darkslategrey: "#2f4f4f",\n    darkturquoise: "#00ced1",\n    darkviolet: "#9400d3",\n    deeppink: "#ff1493",\n    deepskyblue: "#00bfff",\n    dimgray: "#696969",\n    dimgrey: "#696969",\n    dodgerblue: "#1e90ff",\n    firebrick: "#b22222",\n    floralwhite: "#fffaf0",\n    forestgreen: "#228b22",\n    gainsboro: "#dcdcdc",\n    ghostwhite: "#f8f8ff",\n    gold: "#ffd700",\n    goldenrod: "#daa520",\n    greenyellow: "#adff2f",\n    grey: "#808080",\n    honeydew: "#f0fff0",\n    hotpink: "#ff69b4",\n    indianred: "#cd5c5c",\n    indigo: "#4b0082",\n    ivory: "#fffff0",\n    khaki: "#f0e68c",\n    lavender: "#e6e6fa",\n    lavenderblush: "#fff0f5",\n    lawngreen: "#7cfc00",\n    lemonchiffon: "#fffacd",\n    lightblue: "#add8e6",\n    lightcoral: "#f08080",\n    lightcyan: "#e0ffff",\n    lightgoldenrodyellow: "#fafad2",\n    lightgray: "#d3d3d3",\n    lightgreen: "#90ee90",\n    lightgrey: "#d3d3d3",\n    lightpink: "#ffb6c1",\n    lightsalmon: "#ffa07a",\n    lightseagreen: "#20b2aa",\n    lightskyblue: "#87cefa",\n    lightslategray: "#778899",\n    lightslategrey: "#778899",\n    lightsteelblue: "#b0c4de",\n    lightyellow: "#ffffe0",\n    limegreen: "#32cd32",\n    linen: "#faf0e6",\n    magenta: "#ff00ff",\n    mediumaquamarine: "#66cdaa",\n    mediumblue: "#0000cd",\n    mediumorchid: "#ba55d3",\n    mediumpurple: "#9370db",\n    mediumseagreen: "#3cb371",\n    mediumslateblue: "#7b68ee",\n    mediumspringgreen: "#00fa9a",\n    mediumturquoise: "#48d1cc",\n    mediumvioletred: "#c71585",\n    midnightblue: "#191970",\n    mintcream: "#f5fffa",\n    mistyrose: "#ffe4e1",\n    moccasin: "#ffe4b5",\n    navajowhite: "#ffdead",\n    oldlace: "#fdf5e6",\n    olivedrab: "#6b8e23",\n    orange: "#ffa500",\n    orangered: "#ff4500",\n    orchid: "#da70d6",\n    palegoldenrod: "#eee8aa",\n    palegreen: "#98fb98",\n    paleturquoise: "#afeeee",\n    palevioletred: "#db7093",\n    papayawhip: "#ffefd5",\n    peachpuff: "#ffdab9",\n    peru: "#cd853f",\n    pink: "#ffc0cb",\n    plum: "#dda0dd",\n    powderblue: "#b0e0e6",\n    rosybrown: "#bc8f8f",\n    royalblue: "#4169e1",\n    saddlebrown: "#8b4513",\n    salmon: "#fa8072",\n    sandybrown: "#f4a460",\n    seagreen: "#2e8b57",\n    seashell: "#fff5ee",\n    sienna: "#a0522d",\n    skyblue: "#87ceeb",\n    slateblue: "#6a5acd",\n    slategray: "#708090",\n    slategrey: "#708090",\n    snow: "#fffafa",\n    springgreen: "#00ff7f",\n    steelblue: "#4682b4",\n    tan: "#d2b48c",\n    thistle: "#d8bfd8",\n    tomato: "#ff6347",\n    turquoise: "#40e0d0",\n    violet: "#ee82ee",\n    wheat: "#f5deb3",\n    whitesmoke: "#f5f5f5",\n    yellowgreen: "#9acd32",\n};\n\n;// CONCATENATED MODULE: ./src/values/cssNamesParsed.ts\nconst cssNamesParsed = {\n    d: "display",\n    ta: "text-align",\n    tde: "text-decoration",\n    w: "width",\n    h: "height",\n    wmn: "min-width",\n    hmn: "min-height",\n    wmx: "max-width",\n    hmx: "max-height",\n    minw: "min-width",\n    minh: "min-height",\n    maxw: "max-width",\n    maxh: "max-height",\n    rounded: "border-radius",\n    r: "border-radius",\n    rs: ["border-top-left-radius", "border-bottom-left-radius"],\n    re: ["border-top-right-radius", "border-bottom-right-radius"],\n    rt: ["border-top-left-radius", "border-top-right-radius"],\n    rb: ["border-bottom-left-radius", "border-bottom-right-radius"],\n    rst: "border-top-left-radius",\n    ret: "border-top-right-radius",\n    rsb: "border-bottom-left-radius",\n    reb: "border-bottom-right-radius",\n    z: "z-index",\n    o: "opacity",\n    pos: "position",\n    t: "top",\n    bot: "bottom",\n    b: "bottom",\n    start: "left",\n    s: "left",\n    end: "right",\n    e: "right",\n    fs: "font-size",\n    lh: "line-height",\n    g: "gap",\n    p: "padding",\n    pt: "padding-top",\n    pb: "padding-bottom",\n    ps: "padding-left",\n    pe: "padding-right",\n    py: ["padding-top", "padding-bottom"],\n    px: ["padding-left", "padding-right"],\n    m: "margin",\n    mt: "margin-top",\n    mb: "margin-bottom",\n    ms: "margin-left",\n    me: "margin-right",\n    my: ["margin-top", "margin-bottom"],\n    mx: ["margin-left", "margin-right"],\n    bw: "border-width",\n    bwt: "border-top-width",\n    bwb: "border-bottom-width",\n    bws: "border-left-width",\n    bwe: "border-right-width",\n    bwy: ["border-top-width", "border-bottom-width"],\n    bwx: ["border-left-width", "border-right-width"],\n    borderStylet: "border-top-style",\n    borderStyleb: "border-bottom-style",\n    borderStyles: "border-left-style",\n    borderStylee: "border-right-style",\n    borderStyley: ["border-top-style", "border-bottom-style"],\n    borderStylex: ["border-left-style", "border-right-style"],\n    bs: "border-style",\n    bst: "border-top-style",\n    bsb: "border-bottom-style",\n    bss: "border-left-style",\n    bse: "border-right-style",\n    bsy: ["border-top-style", "border-bottom-style"],\n    bsx: ["border-left-style", "border-right-style"],\n    borderColort: "border-top-color",\n    borderColorb: "border-bottom-color",\n    borderColors: "border-left-color",\n    borderColore: "border-right-color",\n    borderColory: ["border-top-color", "border-bottom-color"],\n    borderColorx: ["border-left-color", "border-right-color"],\n    bc: "border-color",\n    bct: "border-top-color",\n    bcb: "border-bottom-color",\n    bcs: "border-left-color",\n    bce: "border-right-color",\n    bcy: ["border-top-color", "border-bottom-color"],\n    bcx: ["border-left-color", "border-right-color"],\n    bg: "background-color",\n    text: "color",\n    bsh: "box-shadow",\n    tsh: "text-shadow",\n    ov: "overflow",\n    ovx: "overflow-x",\n    ovy: "overflow-y",\n};\n\n;// CONCATENATED MODULE: ./src/functions/css-camel.ts\nconst css_camel = {\n    cssValidToCamel(st) {\n        return st.replace(/([-_][a-z])/gi, ($1) => {\n            return $1.toUpperCase().replace("-", "").replace("_", "");\n        });\n    },\n    camelToCSSValid(st) {\n        return st\n            .replace(/[\\w]([A-Z])/g, (m) => {\n            return m[0] + "-" + m[1];\n        })\n            .toLowerCase();\n    },\n};\n\n;// CONCATENATED MODULE: ./src/singletons/valuesSingleton.ts\n\n\n\nclass ValuesSingleton {\n    static instance;\n    indicatorClass = "bef";\n    colors = allColors;\n    abreviationsClasses = {};\n    abreviationsValues = {};\n    combos = {};\n    combosCreated = {};\n    encryptCombo = true;\n    encryptComboCharacters = "■■■";\n    encryptComboCreatedCharacters = "🜔🜔🜔";\n    cssNamesParsed = cssNamesParsed;\n    alreadyCreatedClasses = [];\n    sheet;\n    isDebug = false;\n    bps = [\n        {\n            bp: "sm",\n            value: "576px",\n            class2Create: "",\n        },\n        {\n            bp: "md",\n            value: "768px",\n            class2Create: "",\n        },\n        {\n            bp: "lg",\n            value: "992px",\n            class2Create: "",\n        },\n        {\n            bp: "xl",\n            value: "1200px",\n            class2Create: "",\n        },\n        {\n            bp: "xxl",\n            value: "1400px",\n            class2Create: "",\n        },\n    ];\n    bpsSpecifyOptions = [\n        "",\n        "html",\n        "html body",\n        "html body #" + this.indicatorClass + "-bp",\n        "#" + this.indicatorClass + "-bp",\n    ];\n    limitBPS = false;\n    styleSheetToManage = "bef-styles";\n    separator = "þµÞ";\n    styleConsole = `padding: 0.25rem 0.125rem; background-color: ${this.colors["mystic"]}; color: ${this.colors["friend"]};`;\n    pseudoClasses = [\n        "Active",\n        "AnyLink",\n        "Autofill",\n        "Blank",\n        "Checked",\n        "Current",\n        "Default",\n        "Defined",\n        "Dir",\n        "Disabled",\n        "Empty",\n        "Enabled",\n        "First",\n        "FirstChild",\n        "FirstOfType",\n        "Focus",\n        "FocusVisible",\n        "FocusWithin",\n        "Fullscreen",\n        "Future",\n        "Has",\n        "Host",\n        "Hover",\n        "InRange",\n        "Indeterminate",\n        "Invalid",\n        "Is",\n        "Lang",\n        "LastChild",\n        "LastOfType",\n        "Left",\n        "Link",\n        "LocalLink",\n        "Modal",\n        "Muted",\n        "Not",\n        "NthChild",\n        "NthLastChild",\n        "NthLastOfType",\n        "NthOfType",\n        "OnlyChild",\n        "OnlyOfType",\n        "Optional",\n        "OutOfRange",\n        "Past",\n        "Paused",\n        "PictureInPicture",\n        "PlaceHolderShown",\n        "Playing",\n        "PopoverOpen",\n        "ReadOnly",\n        "ReadWrite",\n        "Required",\n        "Right",\n        "Root",\n        "Scope",\n        "Seeking",\n        "Stalled",\n        "Target",\n        "TargetWithin",\n        "UserInvalid",\n        "UserValid",\n        "Valid",\n        "Visited",\n        "VolumeLocked",\n        "Where",\n    ];\n    pseudosHasSDED = [\n        "Dir",\n        "Not",\n        "Lang",\n        "Has",\n        "Host",\n        "Is",\n        "NthChild",\n        "NthLastChild",\n        "NthLastOfType",\n        "NthOfType",\n        "Part",\n        "Slotted",\n        "Where",\n    ];\n    pseudoElements = [\n        "After",\n        "Backdrop",\n        "Before",\n        "Cue",\n        "CueRegion",\n        "FileSelectorButton",\n        "FirstLetter",\n        "FirstLine",\n        "GrammarError",\n        "Highlight",\n        "Marker",\n        "Part",\n        "Placeholder",\n        "Selection",\n        "Slotted",\n        "SpellingError",\n        "TargetText",\n        "ViewTransition",\n        "ViewTransitionGroup",\n        "ViewTransitionImagePair",\n        "ViewTransitionNew",\n        "ViewTransitionOld",\n    ];\n    pseudos = this.pseudoClasses\n        .sort((e1, e2) => {\n        e1 = e1.toString().length;\n        e2 = e2.toString().length;\n        return e1 > e2 ? 1 : e1 < e2 ? -1 : 0;\n    })\n        .map((pse) => {\n        return {\n            mask: pse,\n            real: `${this.separator}:${css_camel.camelToCSSValid(pse)}`,\n        };\n    })\n        .concat(this.pseudoElements\n        .sort((e1, e2) => {\n        e1 = e1.toString().length;\n        e2 = e2.toString().length;\n        return e1 > e2 ? 1 : e1 < e2 ? -1 : 0;\n    })\n        .map((pse) => {\n        return {\n            mask: pse,\n            real: `${this.separator}::${css_camel.camelToCSSValid(pse)}`,\n        };\n    }));\n    importantActive = true;\n    abreviationTraductors = [\n        {\n            abreviation: "per",\n            traduction: "$1%",\n            abreviationRegExp: /(\\d+)\\s*per/g,\n            traductionRegExp: /%/g,\n        },\n        {\n            abreviation: "COM",\n            traduction: " , ",\n            abreviationRegExp: /COM/g,\n            traductionRegExp: /\\s*,\\s*/g,\n        },\n        {\n            abreviation: "CSP",\n            traduction: `\'`,\n            abreviationRegExp: /CSP/g,\n            traductionRegExp: /\'/g,\n        },\n        {\n            abreviation: "CDB",\n            traduction: `"`,\n            abreviationRegExp: /CDB/g,\n            traductionRegExp: /"/g,\n        },\n        {\n            abreviation: "MIN",\n            traduction: "-",\n            abreviationRegExp: /MIN/g,\n            traductionRegExp: /-/g,\n        },\n        {\n            abreviation: "PLUS",\n            traduction: "+",\n            abreviationRegExp: /PLUS/g,\n            traductionRegExp: /\\+/g,\n        },\n        {\n            abreviation: "SD",\n            traduction: "(",\n            abreviationRegExp: /SD/g,\n            traductionRegExp: /\\(/g,\n        },\n        {\n            abreviation: "ED",\n            traduction: ")",\n            abreviationRegExp: /ED/g,\n            traductionRegExp: /\\)/g,\n        },\n        {\n            abreviation: "SE",\n            traduction: "[",\n            abreviationRegExp: /SE/g,\n            traductionRegExp: /\\[/g,\n        },\n        {\n            abreviation: "EE",\n            traduction: "]",\n            abreviationRegExp: /EE/g,\n            traductionRegExp: /\\]/g,\n        },\n        {\n            abreviation: "HASH",\n            traduction: "#",\n            abreviationRegExp: /HASH/g,\n            traductionRegExp: /#/g,\n        },\n        {\n            abreviation: "SLASH",\n            traduction: "/",\n            abreviationRegExp: /SLASH/g,\n            traductionRegExp: /\\//g,\n        },\n        {\n            abreviation: "UND",\n            traduction: "_",\n            abreviationRegExp: /UND/g,\n            traductionRegExp: /_/g,\n        },\n        {\n            abreviation: "__",\n            traduction: " ",\n            abreviationRegExp: /__/g,\n            traductionRegExp: /\\s+/g,\n        },\n        {\n            abreviation: "_",\n            traduction: ".",\n            abreviationRegExp: /_/g,\n            traductionRegExp: /\\./g,\n        },\n        {\n            abreviation: "CHILD",\n            traduction: " > ",\n            abreviationRegExp: /CHILD/g,\n            traductionRegExp: /\\s*>\\s*/g,\n        },\n        {\n            abreviation: "ADJ",\n            traduction: " + ",\n            abreviationRegExp: /ADJ/g,\n            traductionRegExp: /\\s*\\+\\s*/g,\n        },\n        {\n            abreviation: "SIBL",\n            traduction: " ~ ",\n            abreviationRegExp: /SIBL/g,\n            traductionRegExp: /\\s*~\\s*/g,\n        },\n        {\n            abreviation: "ALL",\n            traduction: "*",\n            abreviationRegExp: /ALL/g,\n            traductionRegExp: /\\*/g,\n        },\n        {\n            abreviation: "EQ",\n            traduction: "=",\n            abreviationRegExp: /EQ/g,\n            traductionRegExp: /=/g,\n        },\n        {\n            abreviation: "ST",\n            traduction: "^",\n            abreviationRegExp: /ST/g,\n            traductionRegExp: /\\^/g,\n        },\n        {\n            abreviation: "INC",\n            traduction: "$",\n            abreviationRegExp: /INC/g,\n            traductionRegExp: /\\$/g,\n        },\n        {\n            abreviation: "DPS",\n            traduction: ":",\n            abreviationRegExp: /DPS/g,\n            traductionRegExp: /:/g,\n        },\n        {\n            abreviation: "PNC",\n            traduction: ";",\n            abreviationRegExp: /PNC/g,\n            traductionRegExp: /;/g,\n        },\n    ];\n    lastCSSCreate = Date.now();\n    lastTimeAsked2Create = new Date().getTime();\n    timesCSSCreated = 0;\n    timeBetweenReCreate = 400;\n    useTimer = true;\n    constructor() { }\n    static getInstance() {\n        if (!ValuesSingleton.instance) {\n            ValuesSingleton.instance = new ValuesSingleton();\n        }\n        return ValuesSingleton.instance;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/functions/console_log.ts\n\nfunction getStackTrace() {\n    let stack;\n    try {\n        throw new Error("");\n    }\n    catch (error) {\n        stack = error.stack || "";\n    }\n    stack = stack.split("\\n").map((line) => {\n        return line.trim();\n    });\n    return stack.splice(stack[0] == "Error" ? 2 : 1);\n}\nconst values = ValuesSingleton.getInstance();\nconst console_log = {\n    consoleLog(type = "log", thing, style = values.styleConsole, line = null, stoper = !values.isDebug) {\n        this.consoleParser({\n            type: type,\n            thing: thing,\n            style: style,\n            line: line,\n            stoper: stoper,\n        });\n    },\n    consoleParser(config) {\n        config.type = config.type ? config.type : "log";\n        config.style = config.style ? config.style : values.styleConsole;\n        config.stoper =\n            config.stoper !== undefined ? config.stoper : !values.isDebug;\n        if (config.stoper === false || config.type === "error") {\n            if (config.line) {\n                console.info("%cline: " + config.line + " = ", config.style);\n            }\n            console.info("%c" + getStackTrace()[2], config.style);\n            console.groupCollapsed("Trace");\n            console.trace();\n            console.groupEnd();\n            {\n                switch (config.type) {\n                    case "log":\n                        console.log("%c" +\n                            (typeof config.thing === "object"\n                                ? JSON.stringify(config.thing)\n                                : config.thing), config.style);\n                        break;\n                    case "info":\n                        console.info("%c" +\n                            (typeof config.thing === "object"\n                                ? JSON.stringify(config.thing)\n                                : config.thing), config.style);\n                        break;\n                    case "error":\n                        console.error("%c" +\n                            (typeof config.thing === "object"\n                                ? JSON.stringify(config.thing)\n                                : config.thing), config.style);\n                        break;\n                    default:\n                        break;\n                }\n            }\n            if (typeof config.thing === "object") {\n                console.dir(config.thing);\n            }\n        }\n    },\n};\n\n;// CONCATENATED MODULE: ./src/functions/abreviation_traductors.ts\n\n\nconst abreviation_traductors_values = ValuesSingleton.getInstance();\nconst abreviation_traductors = {\n    abreviationTraductor(value, type = "traduce") {\n        if (value !== undefined) {\n            console_log.consoleLog("info", {\n                value_beforeAbreviationTraductor: value,\n            });\n            for (const abr of abreviation_traductors_values.abreviationTraductors) {\n                let traduction = abr.traduction;\n                let abreviation = abr.abreviation;\n                let traductionRegExp = abr.traductionRegExp;\n                let abreviationRegExp = abr.abreviationRegExp;\n                if (type === "traduce") {\n                    value = value.replace(abreviationRegExp, traduction);\n                }\n                else if (type === "convert") {\n                    value = value.replace(traductionRegExp, abreviation);\n                }\n            }\n            console_log.consoleLog("info", {\n                value_afterAbreviationTraductor: value,\n            });\n        }\n        return value;\n    },\n    unbefysize(value) {\n        return this.abreviationTraductor(value);\n    },\n    befysize(value) {\n        return this.abreviationTraductor(value, "convert");\n    },\n};\n\n;// CONCATENATED MODULE: ./src/functions/color_transform.ts\n\n\nconst color_transform_values = ValuesSingleton.getInstance();\nconst color_transform = {\n    colorToRGB(color) {\n        try {\n            let rgb = [255, 0, 0];\n            color = color.toLowerCase();\n            switch (true) {\n                case !!color_transform_values.colors[color]:\n                    rgb = this.colorToRGB(color_transform_values.colors[color]);\n                    break;\n                case color.includes("rgb") || color.includes("rgba"):\n                    rgb = this.parseRGB(color);\n                    break;\n                case color.includes("#"):\n                    rgb = this.parseRGB(this.HexToRGB(color));\n                    break;\n                case color.includes("hsl"):\n                    rgb = this.parseRGB(this.HSLToRGB(color));\n                    break;\n                case color.includes("hwb"):\n                    rgb = this.parseRGB(this.HWBToRGB(color));\n                    break;\n                default:\n                    break;\n            }\n            return rgb;\n        }\n        catch (error) {\n            console_log.consoleLog("error", { error: error });\n            return [255, 0, 0];\n        }\n    },\n    RGBToRGBA(rgb, alpha) {\n        return `rgba(${rgb[0]},${rgb[1]},${rgb[2]},${alpha})`;\n    },\n    parseRGB(rgba) {\n        let rgb = [];\n        if (rgba.includes("rgb") || rgba.includes("rgba")) {\n            rgb = rgba.split("(")[1].split(",")[4]\n                ? [\n                    parseInt(rgba.split("(")[1].split(",")[0]),\n                    parseInt(rgba.split("(")[1].split(",")[1]),\n                    parseInt(rgba.split("(")[1].split(",")[2]),\n                    parseInt(rgba.split("(")[1].split(",")[3]),\n                ]\n                : [\n                    parseInt(rgba.split("(")[1].split(",")[0]),\n                    parseInt(rgba.split("(")[1].split(",")[1]),\n                    parseInt(rgba.split("(")[1].split(",")[2]),\n                ];\n        }\n        return rgb;\n    },\n    HexToRGB(Hex) {\n        let rgb = [];\n        const hexCode = Hex.replace("#", "");\n        const hexCodeLength = hexCode.length;\n        if (hexCodeLength === 3) {\n            rgb.push(parseInt(hexCode.charAt(0) + hexCode.charAt(0), 16), parseInt(hexCode.charAt(1) + hexCode.charAt(1), 16), parseInt(hexCode.charAt(2) + hexCode.charAt(2), 16));\n        }\n        else if (hexCodeLength === 4) {\n            rgb.push(parseInt(hexCode.charAt(0) + hexCode.charAt(0), 16), parseInt(hexCode.charAt(1) + hexCode.charAt(1), 16), parseInt(hexCode.charAt(2) + hexCode.charAt(2), 16), parseInt(hexCode.charAt(3) + hexCode.charAt(3), 16));\n        }\n        else if (hexCodeLength === 6) {\n            rgb.push(parseInt(hexCode.charAt(0) + hexCode.charAt(1), 16), parseInt(hexCode.charAt(2) + hexCode.charAt(3), 16), parseInt(hexCode.charAt(4) + hexCode.charAt(5), 16));\n        }\n        else if (hexCodeLength === 8) {\n            rgb.push(parseInt(hexCode.charAt(0) + hexCode.charAt(1), 16), parseInt(hexCode.charAt(2) + hexCode.charAt(3), 16), parseInt(hexCode.charAt(4) + hexCode.charAt(5), 16), parseInt(hexCode.charAt(6) + hexCode.charAt(7), 16));\n        }\n        else {\n            console_log.consoleLog("error", { hexToRGBError: "Invalid hex code" });\n        }\n        return `rgb${![3, 6].includes(hexCodeLength) ? "a" : ""}(${rgb.join(",")})`;\n    },\n    HSLToRGB(HSL) {\n        if (!["hsl", "hsla"].includes(HSL)) {\n            return "rgb(255,0,0,1)";\n        }\n        const rgbSplited = HSL.split("(")[1]\n            .split(")")[0]\n            .split(",")\n            .filter((r) => r !== "hsl" && r !== "hsla");\n        const hDecimal = parseInt(rgbSplited[0]) / 100;\n        const sDecimal = parseInt(rgbSplited[1]) / 100;\n        const lDecimal = parseInt(rgbSplited[2]) / 100;\n        if (parseInt(rgbSplited[1]) === 0) {\n            return `rgb(${lDecimal},${lDecimal},${lDecimal})`;\n        }\n        let q = lDecimal < 0.5\n            ? lDecimal * (1 + sDecimal)\n            : lDecimal + sDecimal - lDecimal * sDecimal;\n        let p = 2 * lDecimal - q;\n        const r = this.HueToRGB(p, q, hDecimal + 1 / 3);\n        const g = this.HueToRGB(p, q, hDecimal);\n        const b = this.HueToRGB(p, q, hDecimal - 1 / 3);\n        return `rgb${rgbSplited[3] && rgbSplited[3] !== "" ? "a" : ""}(${r},${g},${b}${rgbSplited[3] && rgbSplited[3] !== "" ? `,${rgbSplited[3]}` : ""})`;\n    },\n    HueToRGB(p, q, t) {\n        if (t < 0)\n            t += 1;\n        if (t > 1)\n            t -= 1;\n        if (t < 1 / 6)\n            return p + (q - p) * 6 * t;\n        if (t < 1 / 2)\n            return q;\n        if (t < 2 / 3)\n            return p + (q - p) * (2 / 3 - t) * 6;\n        return p;\n    },\n    HWBToRGB(HWB) {\n        const rgbSplited = HWB.split("(")[1]\n            .split(")")[0]\n            .split(",")\n            .filter((r) => r !== "hsl" && r !== "hsla");\n        let h = parseInt(rgbSplited[0]) / 360;\n        let wh = parseInt(rgbSplited[1]) / 100;\n        let bl = parseInt(rgbSplited[2]) / 100;\n        let ratio = wh + bl;\n        let i;\n        let v;\n        let f;\n        let n;\n        if (ratio > 1) {\n            wh /= ratio;\n            bl /= ratio;\n        }\n        i = Math.floor(6 * h);\n        v = 1 - bl;\n        f = 6 * h - i;\n        if ((i & 0x01) !== 0) {\n            f = 1 - f;\n        }\n        n = wh + f * (v - wh);\n        let r;\n        let g;\n        let b;\n        switch (i) {\n            default:\n            case 6:\n            case 0:\n                r = v;\n                g = n;\n                b = wh;\n                break;\n            case 1:\n                r = n;\n                g = v;\n                b = wh;\n                break;\n            case 2:\n                r = wh;\n                g = v;\n                b = n;\n                break;\n            case 3:\n                r = wh;\n                g = n;\n                b = v;\n                break;\n            case 4:\n                r = n;\n                g = wh;\n                b = v;\n                break;\n            case 5:\n                r = v;\n                g = wh;\n                b = n;\n                break;\n        }\n        return `rgb${rgbSplited[3] && rgbSplited[3] !== "" ? "a" : ""}(${Math.round(r * 255)},${Math.round(g * 255)},${Math.round(b * 255)}${rgbSplited[3] && rgbSplited[3] !== "" ? `,${rgbSplited[3]}` : ""})`;\n    },\n    shadeTintColor(rgb, percent) {\n        let R = rgb[0] === 0 && percent > 0\n            ? 16\n            : rgb[0] === 255 && percent < 0\n                ? 239\n                : rgb[0];\n        let G = rgb[1] === 0 && percent > 0\n            ? 16\n            : rgb[1] === 255 && percent < 0\n                ? 239\n                : rgb[1];\n        let B = rgb[2] === 0 && percent > 0\n            ? 16\n            : rgb[2] === 255 && percent < 0\n                ? 239\n                : rgb[2];\n        R = parseInt(((R * (100 + percent)) / 100).toString());\n        G = parseInt(((G * (100 + percent)) / 100).toString());\n        B = parseInt(((B * (100 + percent)) / 100).toString());\n        R = R > 255 ? 255 : R < 0 ? 0 : R;\n        G = G > 255 ? 255 : G < 0 ? 0 : G;\n        B = B > 255 ? 255 : B < 0 ? 0 : B;\n        if (rgb[3]) {\n            let A = rgb[3] ? (rgb[3] * 255).toString(16) : "FF";\n            return [R, G, B, A];\n        }\n        else {\n            return [R, G, B];\n        }\n    },\n};\n\n;// CONCATENATED MODULE: ./src/functions/manage_sheet.ts\n\n\nconst manage_sheet_values = ValuesSingleton.getInstance();\nconst manage_sheet = {\n    checkSheet() {\n        let sheets = [...document.styleSheets];\n        for (let nsheet of sheets) {\n            if (nsheet.href?.includes(manage_sheet_values.styleSheetToManage)) {\n                manage_sheet_values.sheet = nsheet;\n                manage_sheet_values.alreadyCreatedClasses = [];\n                manage_sheet_values.combosCreated = {};\n            }\n        }\n    },\n    getSheet() {\n        if (manage_sheet_values.sheet) {\n            console_log.consoleLog("info", { sheet: manage_sheet_values.sheet });\n            return manage_sheet_values.sheet;\n        }\n        else {\n            return undefined;\n        }\n    },\n};\n\n;// CONCATENATED MODULE: ./src/functions/main/private_utilities/valueComboReplacer.ts\n\nconst valueComboReplacer = async (c, vals) => {\n    let reg = new RegExp(/VAL[0-9]+(DEF.*DEF)?/, "g");\n    if (reg.test(c)) {\n        let matches = c.match(reg);\n        console_log.consoleLog("info", { matches: matches });\n        if (!!matches) {\n            for (let match of matches) {\n                console_log.consoleLog("info", { match: match });\n                let val = parseInt(match.split("VAL")[1].split("DEF")[0]);\n                console_log.consoleLog("info", { val: val });\n                let valueToMatch = `VAL${val}(DEF.*DEF)?`;\n                let valueReg = new RegExp(valueToMatch, "g");\n                console_log.consoleLog("info", {\n                    valueToMatch: valueToMatch,\n                });\n                let def = match.split("DEF")[1];\n                console_log.consoleLog("info", { def: def });\n                console_log.consoleLog("info", { vals: vals });\n                console_log.consoleLog("info", { vals_val: vals[val] });\n                if (!!vals[val] &&\n                    vals[val] !== "" &&\n                    vals[val] !== "undefined" &&\n                    vals[val] !== "DEF" &&\n                    vals[val] !== "null") {\n                    if (/VAL[0-9]+/.test(vals[val])) {\n                        let valval = vals[val].replace(/VAL/g, "");\n                        console_log.consoleLog("info", { valval: valval });\n                        c = c.replace(valueReg, vals[parseInt(valval)] &&\n                            vals[parseInt(valval)] !== "VAL" + valval\n                            ? vals[parseInt(valval)]\n                            : def\n                                ? def\n                                : "");\n                        console_log.consoleLog("info", { c: c });\n                    }\n                    else {\n                        c = c.replace(valueReg, vals[val]);\n                        console_log.consoleLog("info", { c: c });\n                    }\n                }\n                else {\n                    c = c.replace(valueReg, def ? def : "");\n                    console_log.consoleLog("info", { c: c });\n                }\n            }\n            return c;\n        }\n        else {\n            return c;\n        }\n    }\n    else {\n        return c;\n    }\n};\n\n;// CONCATENATED MODULE: ./src/functions/main/private_utilities/values4ComboGetter.ts\n\nconst values4ComboGetter = async (class2Create) => {\n    if (!!class2Create.includes("VALS")) {\n        let valsSource = class2Create.split("VALS")[1];\n        console_log.consoleLog("info", { valsSource: valsSource });\n        let valueReg = new RegExp(/VAL[0-9]N.*VAL[0-9]N/, "g");\n        if (valueReg.test(valsSource)) {\n            let valsToSortSource = valsSource.match(valueReg);\n            console_log.consoleLog("info", { valsToSortSource: valsToSortSource });\n            if (!!valsToSortSource) {\n                let valsToSort = valsToSortSource.map((v) => {\n                    let index = parseInt(v.split("VAL")[1].split("N")[0]);\n                    let valReplace = new RegExp(`VAL${index}N`, "g");\n                    return {\n                        index: index,\n                        val: v.replace(valReplace, ""),\n                    };\n                });\n                console_log.consoleLog("info", { valsToSort: valsToSort });\n                let valsNotSorted = valsSource.split("VL");\n                console_log.consoleLog("info", { valsNotSorted: valsNotSorted });\n                let noValsNotSorted = false;\n                if (valsNotSorted.length >= 1) {\n                    valsNotSorted.shift();\n                }\n                if (valsNotSorted.length <= 0) {\n                    noValsNotSorted = true;\n                }\n                console_log.consoleLog("info", { noValsNotSorted: noValsNotSorted });\n                let ocupedIndexes = valsToSort.map((v) => v.index);\n                console_log.consoleLog("info", { ocupedIndexes: ocupedIndexes });\n                if (!noValsNotSorted) {\n                    let valsNotSortedSorted = valsNotSorted.map((v) => {\n                        let index = 1;\n                        while (ocupedIndexes.includes(index)) {\n                            index++;\n                        }\n                        ocupedIndexes.push(index);\n                        return {\n                            index: index,\n                            val: v,\n                        };\n                    });\n                    console_log.consoleLog("info", {\n                        valsNotSortedSorted: valsNotSortedSorted,\n                    });\n                    valsNotSortedSorted.sort((v1, v2) => {\n                        return v1.index - v2.index;\n                    });\n                    console_log.consoleLog("info", {\n                        valsNotSortedSortedSorted: valsNotSortedSorted,\n                    });\n                    valsToSort = valsToSort.concat(valsNotSortedSorted);\n                    valsToSort.sort((v1, v2) => {\n                        return v1.index - v2.index;\n                    });\n                    console_log.consoleLog("info", { valsToSort: valsToSort });\n                }\n                let emptyValsToFillValsSorted = [];\n                let lastValIndex = valsToSort.sort((v1, v2) => {\n                    return v1.index - v2.index;\n                })[valsToSort.length - 1].index;\n                console_log.consoleLog("info", { lastValIndex: lastValIndex });\n                for (let i = 0; i < lastValIndex; i++) {\n                    if (!ocupedIndexes.includes(i)) {\n                        emptyValsToFillValsSorted.push({\n                            index: i,\n                            val: "",\n                        });\n                    }\n                }\n                console_log.consoleLog("info", {\n                    emptyValsToFillValsSorted: emptyValsToFillValsSorted,\n                });\n                let valsSorted = valsToSort\n                    .concat(emptyValsToFillValsSorted)\n                    .sort((v1, v2) => {\n                    return v1.index - v2.index;\n                });\n                console_log.consoleLog("info", { valsSorted: valsSorted });\n                return valsSorted.map((v) => v.val);\n            }\n            else {\n                return valsSource.split("VL");\n            }\n        }\n        else {\n            return valsSource.split("VL");\n        }\n    }\n    else {\n        return [];\n    }\n};\n\n;// CONCATENATED MODULE: ./src/functions/main/private_utilities/comboParser.ts\n\n\n\n\nconst comboParser_values = ValuesSingleton.getInstance();\nconst comboParser = async (class2Create, comb, class2CreateElement, classes2Create) => {\n    let combIndex = comb ? Object.keys(comboParser_values.combos).indexOf(comb) : -1;\n    console_log.consoleLog("info", { combIndex: combIndex });\n    console_log.consoleLog("info", { class2Create: class2Create });\n    let vals = await values4ComboGetter(class2Create);\n    console_log.consoleLog("info", { vals: vals });\n    await Promise.all(comboParser_values.combos[comb].map(async (c) => {\n        console_log.consoleLog("info", { combo: c });\n        c = await valueComboReplacer(c, vals);\n        console_log.consoleLog("info", { cAfterValueComboReplacer: c });\n        if (c.startsWith(comboParser_values.indicatorClass)) {\n            let combosCreatedABBR = Object.keys(comboParser_values.combosCreated);\n            console_log.consoleLog("info", {\n                combosCreatedABBR: combosCreatedABBR,\n            });\n            let alreadyABBRCombo = combosCreatedABBR.find((cs) => {\n                return comboParser_values.combosCreated[cs] === class2Create;\n            });\n            console_log.consoleLog("info", {\n                alreadyABBRCombo: alreadyABBRCombo,\n            });\n            let combosCreatedKeys = Object.keys(comboParser_values.combosCreated);\n            let combCreatedKey = combosCreatedKeys.find((cs) => {\n                return comboParser_values.combosCreated[cs] === class2Create;\n            }) || comboParser_values.encryptComboCharacters + combosCreatedKeys.length;\n            if (!alreadyABBRCombo) {\n                comboParser_values.combosCreated[comboParser_values.encryptCombo ? combCreatedKey : class2Create] = class2Create;\n                console_log.consoleLog("info", {\n                    cStartsWithClass2Create: comboParser_values.combosCreated[comboParser_values.encryptCombo ? combCreatedKey : class2Create],\n                });\n            }\n            console_log.consoleLog("info", {\n                combosCreatedABBR: combosCreatedABBR,\n            });\n            let comboABBR = comboParser_values.encryptCombo\n                ? combCreatedKey\n                : class2Create;\n            console_log.consoleLog("info", { comboABBR: comboABBR });\n            console_log.consoleLog("info", { c: c });\n            let pseudos = comboParser_values.pseudos.filter((p) => c.split("-")[1].includes(p.mask));\n            let firstPseudo = pseudos.sort((p1, p2) => {\n                return c.indexOf(p1.mask) - c.indexOf(p2.mask);\n            })[0] || -1;\n            switch (true) {\n                case pseudos.length > 0 &&\n                    !!(!c.includes("SEL") ||\n                        c.indexOf("SEL") > c.indexOf(firstPseudo.mask)):\n                    console_log.consoleLog("info", { firstPseudo: firstPseudo });\n                    c = c\n                        .replace("SEL", "")\n                        .replace(firstPseudo.mask, "SEL__COM_" + comboABBR + firstPseudo.mask);\n                    console_log.consoleLog("info", { cIncludesPseudoAfter: c });\n                    break;\n                case !!c.includes("SEL"):\n                    c = c.replace("SEL", "SEL__COM_" + comboABBR + "__");\n                    console_log.consoleLog("info", { cIncludesSELAfter: c });\n                    break;\n                default:\n                    console_log.consoleLog("info", { cDoesntIncludesSEL: c });\n                    c = c.replace(c.split("-")[1], c.split("-")[1] + "SEL__COM_" + comboABBR);\n                    console_log.consoleLog("info", {\n                        cDoesntIncludesSELAfter: c,\n                    });\n                    break;\n            }\n        }\n        else {\n            console_log.consoleLog("info", {\n                cDoesntStartsWithClass2Create: c,\n            });\n            class2CreateElement.classList.add(c);\n        }\n        if (!classes2Create.includes(c)) {\n            classes2Create.push(c);\n        }\n        return c;\n    }));\n    return classes2Create;\n};\n\n;// CONCATENATED MODULE: ./src/functions/main/private_utilities/getNewClasses2Create.ts\n\n\nconst getNewClasses2Create_values = ValuesSingleton.getInstance();\nconst getNewClasses2Create = async (classes2Create) => {\n    Array.from(document.querySelectorAll("*")).forEach((value) => {\n        value.classList.forEach(async (item) => {\n            let comb = Object.keys(getNewClasses2Create_values.combos).find((cs) => {\n                return item.includes(cs);\n            });\n            if (!!comb && getNewClasses2Create_values.combos[comb]) {\n                classes2Create = await comboParser(item, comb, value, classes2Create);\n            }\n            else if (!comb &&\n                !classes2Create.includes(item) &&\n                item !== getNewClasses2Create_values.indicatorClass &&\n                (item.includes(getNewClasses2Create_values.indicatorClass) ||\n                    Object.keys(getNewClasses2Create_values.abreviationsClasses).find((aC) => item.includes(aC)))) {\n                classes2Create.push(item);\n            }\n        });\n    });\n    return classes2Create;\n};\n\n;// CONCATENATED MODULE: ./src/functions/main/private_utilities/convertPseudos.ts\n\n\nconst convertPseudos_values = ValuesSingleton.getInstance();\nconst convertPseudos = (thing, remove = false) => {\n    console_log.consoleLog("info", { thing_beforeconvertPseudos: thing });\n    let pseudoFiltereds = convertPseudos_values.pseudos.filter((pseudo) => {\n        return thing.includes(pseudo.mask);\n    });\n    pseudoFiltereds.forEach((pse) => {\n        let regMask = new RegExp(":*" + pse.mask, "gi");\n        switch (true) {\n            case convertPseudos_values.pseudosHasSDED.includes(pse.mask):\n                regMask = new RegExp(":*" + pse.mask + "\\\\" + "(", "gi");\n                break;\n            case ["Right", "Left"].includes(pse.mask):\n                regMask = new RegExp("page" + pse.mask, "gi");\n                break;\n            default:\n                break;\n        }\n        thing = thing\n            .replace("SD", "(")\n            .replace("ED", ")")\n            .replace(regMask, !remove\n            ? convertPseudos_values.pseudosHasSDED.includes(pse.mask)\n                ? pse.real + "("\n                : ["Right", "Left"].includes(pse.mask)\n                    ? "page" + pse.real\n                    : pse.real\n            : "");\n    });\n    console_log.consoleLog("info", { thing_afterconvertPseudos: thing });\n    return thing;\n};\n\n;// CONCATENATED MODULE: ./src/functions/main/private_utilities/look4BPNVals.ts\n\nconst look4BPNVals_values = ValuesSingleton.getInstance();\nconst look4BPNVals = async (class2CreateSplited) => {\n    if (look4BPNVals_values.bps.find((b) => class2CreateSplited[2] === b.bp)) {\n        return {\n            hasBP: true,\n            values: class2CreateSplited.slice(3),\n        };\n    }\n    else {\n        return {\n            hasBP: false,\n            values: class2CreateSplited.slice(2),\n        };\n    }\n};\n\n;// CONCATENATED MODULE: ./src/functions/main/private_utilities/valueTraductor.ts\n\n\n\nconst valueTraductor_values = ValuesSingleton.getInstance();\nconst valueTraductor = async (value, property) => {\n    value = abreviation_traductors.abreviationTraductor(!!valueTraductor_values.abreviationsValues[value]\n        ? valueTraductor_values.abreviationsValues[value]\n        : value);\n    if (!property.includes("content")) {\n        let hasOPA = value.includes("OPA");\n        if (!!hasOPA) {\n            const reg = new RegExp(/(?:([A-z0-9#]*)|(?:(rgb)|(hsl)|(hwb))a?\\([0-9\\.\\,\\s%]*\\))\\s?OPA\\s?0\\.[0-9]*/gi);\n            const OPAS = value.match(reg);\n            if (!!OPAS) {\n                for (let OPA of OPAS) {\n                    const color = OPA.split("OPA")[0];\n                    const OPAValue = OPA.split("OPA")[1];\n                    let realColor = `${color_transform\n                        .colorToRGB(!!valueTraductor_values.colors[color.toString().replace(/\\s/g, "")]\n                        ? valueTraductor_values.colors[color.toString().replace(/\\s/g, "")]\n                        : color)\n                        .toString()}`;\n                    value = !!OPAValue\n                        ? value\n                            .replace(color, `rgba(${realColor},${OPAValue})`)\n                            .replace("OPA" + OPAValue, "")\n                        : value;\n                }\n            }\n        }\n        let colors = Object.keys(valueTraductor_values.colors)\n            .sort((c1, c2) => {\n            return c2.length - c1.length;\n        })\n            .map((c) => `(${c})`)\n            .join("|");\n        let reg = new RegExp("(?:" + colors + ")", "gi");\n        let matches = value.match(reg);\n        if (!!matches) {\n            for (let match of matches) {\n                let realColor = valueTraductor_values.colors[match.replace(/\\s/g, "")];\n                if (!!realColor) {\n                    value = value.replace(match, `rgba(${color_transform.colorToRGB(realColor)})`);\n                }\n            }\n        }\n    }\n    return value;\n};\n\n;// CONCATENATED MODULE: ./src/functions/main/private_utilities/decryptCombo.ts\n\n\nconst decryptCombo_values = ValuesSingleton.getInstance();\nconst decryptCombo = async (specify, class2Create, class2CreateStringed) => {\n    let alreadyABBRCombo = Object.keys(decryptCombo_values.combosCreated).find((cs) => {\n        console_log.consoleLog("info", { cs: cs });\n        return specify.includes(cs);\n    });\n    return !!alreadyABBRCombo\n        ? await (async () => {\n            console_log.consoleLog("info", { alreadyABBRCombo: alreadyABBRCombo });\n            return await Promise.all([specify, class2Create, class2CreateStringed].map(async (val, index) => {\n                return alreadyABBRCombo\n                    ? val.replace(new RegExp(alreadyABBRCombo, "g"), decryptCombo_values.combosCreated[alreadyABBRCombo])\n                    : val;\n            }));\n        })()\n        : [specify, class2Create, class2CreateStringed];\n};\n\n;// CONCATENATED MODULE: ./src/functions/main/private_utilities/btnCreator.ts\n\n\nconst btnCreator_values = ValuesSingleton.getInstance();\nconst btnCreator = async (class2Create, specify, value, secondValue = "", outline = false) => {\n    return `${specify}{${outline ? "color:" + value + ";" : ""}background-color:${outline ? secondValue : value};border-color:${value};}${btnCreator_values.separator}.${class2Create}${specify}:hover{${outline && secondValue ? "color:" + secondValue + ";" : ""}background-color:${outline\n        ? value\n        : `rgba(${color_transform\n            .shadeTintColor(color_transform.colorToRGB(value), -15)\n            .toString()});border-color:rgba(${color_transform\n            .shadeTintColor(color_transform.colorToRGB(value), -20)\n            .toString()})`};}${btnCreator_values.separator}${outline\n        ? ""\n        : `.btn-check:focus + .${class2Create}${specify}, .${class2Create}${specify}:focus{background-color:rgba(${color_transform\n            .shadeTintColor(color_transform.colorToRGB(value), -15)\n            .toString()});border-color:rgba(${color_transform\n            .shadeTintColor(color_transform.colorToRGB(value), -20)\n            .toString()});}${btnCreator_values.separator}`}.btn-check:checked + .${class2Create}${specify}, .btn-check:active + .${class2Create}${specify}, .${class2Create}${specify}:active, .${class2Create}${specify}.active, .show > .${class2Create}${specify} .dropdown-toggle{${outline\n        ? ""\n        : `background-color:${color_transform.shadeTintColor(color_transform.colorToRGB(value), -20)};`}border-color:rgba(${color_transform\n        .shadeTintColor(color_transform.colorToRGB(value), -25)\n        .toString()});box-shadow: 0 0 0 0.25remrgba(${color_transform\n        .shadeTintColor(color_transform.colorToRGB(value), 3)\n        .toString()}, 0.5);}${btnCreator_values.separator}.btn-check:checked + .btn-check:focus, .btn-check:active + .${class2Create}${specify}:focus, .${class2Create}${specify}:active:focus, .${class2Create}${specify}.active:focus, .show > .${class2Create}${specify} .dropdown-toggle:focus{box-shadow: 0 0 0 0.25rem rgba(${color_transform\n        .shadeTintColor(color_transform.colorToRGB(value), 3)\n        .toString()}, 0.5);}`;\n};\n\n;// CONCATENATED MODULE: ./src/functions/main/private_utilities/property2ValueJoiner.ts\n\n\n\nconst property2ValueJoiner_values = ValuesSingleton.getInstance();\nconst property2ValueJoiner = async (property, class2CreateSplited, class2Create, propertyValues = [""], specify = "") => {\n    switch (true) {\n        case !!property2ValueJoiner_values.cssNamesParsed[property.toString()]:\n            if (typeof property2ValueJoiner_values.cssNamesParsed[property.toString()] === "string") {\n                return `${specify}{${property2ValueJoiner_values.cssNamesParsed[property.toString()]}:${propertyValues[0]};}`;\n            }\n            else {\n                return `${specify}{${property2ValueJoiner_values.cssNamesParsed[property.toString()]\n                    .map((c, i) => {\n                    return `${c}:${propertyValues[i] || propertyValues[0] || ""};`;\n                })\n                    .join("")}}`;\n            }\n            break;\n        case class2CreateSplited[1].startsWith("link"):\n            return ` a${specify}{color:${propertyValues[0]};}`;\n            break;\n        case class2CreateSplited[1].startsWith("btnOutline"):\n            return await btnCreator(class2Create, specify, propertyValues[0], propertyValues[1] || "", true);\n            break;\n        case class2CreateSplited[1].startsWith("btn"):\n            return await btnCreator(class2Create, specify, propertyValues[0]);\n            break;\n        default:\n            return `${specify}{${css_camel.camelToCSSValid(property)}:${propertyValues[0]};}`;\n            break;\n    }\n};\n\n;// CONCATENATED MODULE: ./src/functions/main/private_utilities/parseClass.ts\n\n\n\n\n\n\n\n\nconst parseClass_values = ValuesSingleton.getInstance();\nconst parseClass = async (class2Create, bpsStringed, classes2CreateStringed, updateClasses2Create = null) => {\n    if (!updateClasses2Create) {\n        if (parseClass_values.alreadyCreatedClasses.find((aC) => {\n            return aC === class2Create;\n        }) ||\n            [...parseClass_values.sheet.cssRules].find((i) => i.cssText.split(" ").find((aC) => {\n                return aC.replace(".", "") === class2Create;\n            }))) {\n            return {\n                class2Create: class2Create,\n                bpsStringed: bpsStringed,\n                classes2CreateStringed: classes2CreateStringed,\n            };\n        }\n    }\n    else {\n        parseClass_values.alreadyCreatedClasses.push(class2Create);\n    }\n    let class2CreateStringed = "." + class2Create;\n    console_log.consoleLog("info", {\n        class2CreateStringed: class2CreateStringed,\n    });\n    if (!class2Create.includes(parseClass_values.indicatorClass)) {\n        let abbrClss = Object.keys(parseClass_values.abreviationsClasses).find((aC) => class2Create.includes(aC));\n        if (!!abbrClss) {\n            class2Create = class2Create.replace(abbrClss, parseClass_values.abreviationsClasses[abbrClss]);\n        }\n    }\n    let class2CreateSplited = class2Create.split("-");\n    console_log.consoleLog("info", {\n        class2CreateSplited: class2CreateSplited,\n    });\n    let comboCreatedKey = Object.keys(parseClass_values.combosCreated).find((cC) => {\n        return class2Create.includes(cC);\n    });\n    if (!!comboCreatedKey) {\n        let comboKeyReg = new RegExp(comboCreatedKey, "g");\n        class2CreateSplited[1] = class2CreateSplited[1].replace(comboKeyReg, parseClass_values.encryptComboCreatedCharacters);\n    }\n    let classWithPseudosConvertedAndSELSplited = convertPseudos(class2CreateSplited[1])\n        .replace(/SEL/g, parseClass_values.separator)\n        .split(`${parseClass_values.separator}`);\n    console_log.consoleLog("info", {\n        classWithPseudosConvertedAndSELSplited: classWithPseudosConvertedAndSELSplited,\n    });\n    let property = classWithPseudosConvertedAndSELSplited[0];\n    console_log.consoleLog("info", { property: property });\n    let specify = abreviation_traductors.abreviationTraductor(classWithPseudosConvertedAndSELSplited\n        .map((bs, i) => {\n        if (i !== 0) {\n            return bs;\n        }\n        else {\n            return "";\n        }\n    })\n        .join(""));\n    if (!!comboCreatedKey) {\n        let comboKeyCypherReg = new RegExp(parseClass_values.encryptComboCreatedCharacters, "g");\n        class2CreateSplited[1] = class2CreateSplited[1].replace(comboKeyCypherReg, comboCreatedKey);\n        specify = specify.replace(comboKeyCypherReg, comboCreatedKey);\n        class2Create = class2Create.replace(comboKeyCypherReg, comboCreatedKey);\n        class2CreateStringed = class2CreateStringed.replace(comboKeyCypherReg, comboCreatedKey);\n    }\n    console_log.consoleLog("info", { specify: specify });\n    if (!!specify && parseClass_values.encryptCombo) {\n        console_log.consoleLog("info", {\n            specifyPreDecryptCombo: specify,\n            class2CreatePreDecryptCombo: class2Create,\n            class2CreateStringedPreDecryptCombo: class2CreateStringed,\n        });\n        [specify, class2Create, class2CreateStringed] = await decryptCombo(specify, class2Create, class2CreateStringed);\n        console_log.consoleLog("info", {\n            specifyPostDecryptCombo: specify,\n            class2CreatePostDecryptCombo: class2Create,\n            class2CreateStringedPostDecryptCombo: class2CreateStringed,\n        });\n    }\n    let [hasBP, propertyValues] = Object.values(await look4BPNVals(class2CreateSplited));\n    console_log.consoleLog("info", {\n        hasBP: hasBP,\n        propertyValues: propertyValues,\n    });\n    propertyValues = await Promise.all(propertyValues.map(async (pv) => {\n        return await valueTraductor(pv, property);\n    }));\n    console_log.consoleLog("info", {\n        propertyValues: propertyValues,\n    });\n    if (!propertyValues[0]) {\n        propertyValues[0] = "default";\n    }\n    class2CreateStringed += await property2ValueJoiner(property, class2CreateSplited, class2Create, propertyValues, specify);\n    if (!!parseClass_values.importantActive) {\n        for (let cssProperty of class2CreateStringed.split(";")) {\n            if (!cssProperty.includes("!important") && cssProperty.length > 5) {\n                class2CreateStringed = class2CreateStringed.replace(cssProperty, cssProperty + " !important");\n            }\n        }\n    }\n    if (class2CreateStringed.includes("{") &&\n        class2CreateStringed.includes("}")) {\n        if (hasBP === true) {\n            class2CreateStringed = class2CreateStringed.replace(new RegExp(parseClass_values.separator, "g"), "");\n            bpsStringed = bpsStringed.map((b) => {\n                if (class2CreateSplited[2] === b.bp) {\n                    b.class2Create += class2CreateStringed;\n                }\n                return b;\n            });\n        }\n        else {\n            classes2CreateStringed += class2CreateStringed + parseClass_values.separator;\n        }\n    }\n    return {\n        class2Create: class2Create,\n        bpsStringed: bpsStringed,\n        classes2CreateStringed: classes2CreateStringed,\n    };\n};\n\n;// CONCATENATED MODULE: ./src/functions/private/createSimpleRule.ts\n\n\nconst createSimpleRule_values = ValuesSingleton.getInstance();\nconst createSimpleRule = (rule) => {\n    let originalMediaRules = false;\n    let rulesParsed = rule\n        .replace(/{/g, createSimpleRule_values.separator)\n        .replace(/}/g, createSimpleRule_values.separator)\n        .split(createSimpleRule_values.separator)\n        .filter((r) => r !== "")\n        .map((r) => {\n        return r.replace(/\\n/g, "").replace(/\\s{2}/g, "");\n    });\n    let mediaRule = rulesParsed[0].includes("media")\n        ? rulesParsed[0]\n        : "";\n    if (mediaRule !== "") {\n        if (mediaRule.endsWith(" ")) {\n            mediaRule = mediaRule.slice(0, -1);\n        }\n        rulesParsed.shift();\n        [...createSimpleRule_values.sheet.cssRules].forEach((css) => {\n            if (css.cssText.includes(mediaRule) && css.cssRules) {\n                originalMediaRules = true;\n                let i = 0;\n                while (i <= rulesParsed.length) {\n                    let index = 0;\n                    let posibleRule = [...css.cssRules].some((cssRule, ix) => {\n                        if (cssRule.cssText.includes(rulesParsed[i])) {\n                            index = ix;\n                            return true;\n                        }\n                        else {\n                            return false;\n                        }\n                    })\n                        ? [...css.cssRules].find((i) => i.cssText.split(" ").find((aC) => {\n                            return aC.replace(".", "") === rulesParsed[i];\n                        }))\n                        :\n                            undefined;\n                    if (!!posibleRule) {\n                        css.deleteRule(index);\n                    }\n                    let newRule = `${rulesParsed[i]}{${rulesParsed[i + 1]}}`;\n                    console_log.consoleLog("info", { newRule: newRule });\n                    css.insertRule(newRule, css.cssRules.length);\n                    i = i + 2;\n                }\n            }\n        });\n    }\n    if (originalMediaRules === false) {\n        console_log.consoleLog("info", { rule: rule });\n        createSimpleRule_values.sheet.insertRule(rule, createSimpleRule_values.sheet.cssRules.length);\n    }\n};\n\n;// CONCATENATED MODULE: ./src/functions/private/createMediaRule.ts\n\n\nconst createMediaRule_values = ValuesSingleton.getInstance();\nconst createMediaRule = (rule) => {\n    let index;\n    let originalRule = [...createMediaRule_values.sheet.cssRules].some((cssRule, i) => {\n        if (cssRule.cssText.includes(rule.split("{")[0].replace("\\n", "").replace(/\\s+/g, " "))) {\n            index = i;\n            return true;\n        }\n        else {\n            return false;\n        }\n    })\n        ? [...createMediaRule_values.sheet.cssRules].find((i) => i.cssText\n            .split(" ")\n            .find((aC) => {\n            return (aC.replace(".", "") ===\n                rule.split("{")[0].replace("\\n", "").replace(/\\s+/g, " "));\n        }))\n        : undefined;\n    if (originalRule) {\n        createMediaRule_values.sheet.deleteRule(index);\n    }\n    console_log.consoleLog("info", { rule: rule });\n    createMediaRule_values.sheet.insertRule(rule, createMediaRule_values.sheet.cssRules.length);\n};\n\n;// CONCATENATED MODULE: ./src/functions/manage_CSSRules.ts\n\n\n\n\nconst manage_CSSRules_values = ValuesSingleton.getInstance();\nconst manage_CSSRules = {\n    createCSSRules(rules, dontSplitted = false) {\n        try {\n            if (!!dontSplitted && !Array.isArray(rules)) {\n                for (let rule of rules.split(manage_CSSRules_values.separator)) {\n                    if (rule !== "") {\n                        manage_CSSRules.createCSSRule(rule);\n                    }\n                }\n            }\n            else if (Array.isArray(rules)) {\n                rules.forEach((rule) => {\n                    manage_CSSRules.createCSSRule(rule);\n                });\n            }\n            else {\n                manage_CSSRules.createCSSRule(rules);\n            }\n        }\n        catch (err) {\n            console_log.consoleLog("error", { err: err });\n        }\n    },\n    createCSSRule(rule) {\n        try {\n            console_log.consoleLog("info", { rule: rule });\n            if (rule && !rule.split("{")[0].includes("@media")) {\n                createMediaRule(rule);\n            }\n            else {\n                createSimpleRule(rule);\n            }\n            console_log.consoleLog("info", { sheet: manage_CSSRules_values.sheet });\n        }\n        catch (err) {\n            console_log.consoleLog("error", { err: err });\n        }\n    },\n};\n\n;// CONCATENATED MODULE: ./src/functions/main/private_utilities/send2CreateRules.ts\n\n\n\nconst send2CreateRules_values = ValuesSingleton.getInstance();\nconst send2CreateRules = (classes2CreateStringed, bpsStringed) => {\n    bpsStringed = bpsStringed\n        .sort((b1, b2) => {\n        return (parseInt(b1.value.replace("px", "")) -\n            parseInt(b2.value.replace("px", "")));\n    })\n        .reverse();\n    bpsStringed.forEach((b, i) => {\n        if (b.class2Create !== "") {\n            console_log.consoleLog("info", {\n                bp: b.bp,\n                value: b.value,\n                class2Create: b.class2Create,\n            });\n            send2CreateRules_values.bpsSpecifyOptions.forEach((specifyOption) => {\n                classes2CreateStringed += `@media only screen and (min-width: ${b.value})${send2CreateRules_values.limitBPS\n                    ? bpsStringed.length > 1 && i !== 0\n                        ? `and (max-width: ${bpsStringed[i - 1].value})`\n                        : ""\n                    : ""} { ${specifyOption} ${b.class2Create}}${send2CreateRules_values.separator}`;\n            });\n            b.class2Create = "";\n        }\n    });\n    if (classes2CreateStringed !== "") {\n        console_log.consoleLog("info", {\n            classes2CreateStringed: classes2CreateStringed,\n        });\n        for (let class2Create of classes2CreateStringed.split(send2CreateRules_values.separator)) {\n            if (class2Create !== "") {\n                manage_CSSRules.createCSSRules(class2Create);\n            }\n        }\n    }\n};\n\n;// CONCATENATED MODULE: ./src/functions/main/doCssCreate.ts\n\n\n\n\n\n\nconst doCssCreate_values = ValuesSingleton.getInstance();\nconst doCssCreate = {\n    async start(updateClasses2Create = null) {\n        try {\n            if (!doCssCreate_values.sheet) {\n                manage_sheet.checkSheet();\n                if (!doCssCreate_values.sheet) {\n                    throw new Error(`There is no ${doCssCreate_values.styleSheetToManage} style sheet!`);\n                }\n            }\n            const startTimeCSSCreate = performance.now();\n            let classes2Create = [];\n            if (!updateClasses2Create) {\n                classes2Create = await getNewClasses2Create(classes2Create);\n            }\n            else {\n                classes2Create = updateClasses2Create;\n            }\n            console_log.consoleLog("info", { classes2Create: classes2Create });\n            let classes2CreateStringed = "";\n            let bpsStringed = doCssCreate_values.bps.map((b) => b);\n            for (let class2Create of classes2Create) {\n                [class2Create, bpsStringed, classes2CreateStringed] = Object.values(await parseClass(class2Create, bpsStringed, classes2CreateStringed, updateClasses2Create));\n            }\n            console_log.consoleLog("info", {\n                classes2CreateStringed: classes2CreateStringed,\n                bpsStringed: bpsStringed,\n            });\n            send2CreateRules(classes2CreateStringed, bpsStringed);\n            const endTimeCSSCreate = performance.now();\n            console_log.consoleLog("info", `Call to cssCreate() took ${endTimeCSSCreate - startTimeCSSCreate} milliseconds`);\n            let class2CreateTimer = document.getElementById(doCssCreate_values.indicatorClass + "Timer");\n            if (class2CreateTimer) {\n                class2CreateTimer.innerHTML = `\r\n            <p>\r\n            Call to cssCreate() took ${endTimeCSSCreate - startTimeCSSCreate} milliseconds\r\n            </p>\r\n            `;\n            }\n        }\n        catch (err) {\n            console_log.consoleLog("error", { err: err });\n        }\n    },\n};\n\n;// CONCATENATED MODULE: ./src/functions/private/timeManagerCssCreate.ts\n\n\n\nconst timeManagerCssCreate_values = ValuesSingleton.getInstance();\nconst timeManagerCssCreate = {\n    delayedCssCreate(updateClasses2Create = null, primordial = false) {\n        if (Date.now() - timeManagerCssCreate_values.lastCSSCreate >= timeManagerCssCreate_values.timeBetweenReCreate ||\n            primordial === true ||\n            timeManagerCssCreate_values.timesCSSCreated === 0) {\n            timeManagerCssCreate_values.timesCSSCreated++;\n            doCssCreate.start(updateClasses2Create);\n            timeManagerCssCreate_values.lastCSSCreate = Date.now();\n            console_log.consoleParser({\n                thing: { timesCSSCreated: timeManagerCssCreate_values.timesCSSCreated },\n            });\n        }\n        else {\n            if (Date.now() - timeManagerCssCreate_values.timeBetweenReCreate <\n                timeManagerCssCreate_values.lastTimeAsked2Create) {\n                this.handleDelayedCssCreate(updateClasses2Create, primordial);\n            }\n        }\n    },\n    handleDelayedCssCreate(updateClasses2Create = null, primordial = false) {\n        setTimeout(() => {\n            this.delayedCssCreate(updateClasses2Create, primordial);\n        }, timeManagerCssCreate_values.timeBetweenReCreate);\n    },\n};\n\n;// CONCATENATED MODULE: ./src/functions/private/doUseTimer.ts\n\n\nconst doUseTimer_values = ValuesSingleton.getInstance();\nconst doUseTimer = (updateClasses2Create = null, primordial = false) => {\n    doUseTimer_values.lastTimeAsked2Create = Date.now();\n    timeManagerCssCreate.delayedCssCreate(updateClasses2Create, primordial);\n};\n\n;// CONCATENATED MODULE: ./src/functions/cssCreate.ts\n\n\n\n\n\nconst cssCreate_values = ValuesSingleton.getInstance();\nconst cssCreate = {\n    cssCreate(updateClasses2Create = null, primordial = false) {\n        try {\n            if (!cssCreate_values.sheet) {\n                manage_sheet.checkSheet();\n                if (!cssCreate_values.sheet) {\n                    throw new Error(`There is no ${cssCreate_values.styleSheetToManage} style sheet!`);\n                }\n            }\n            if (!!cssCreate_values.useTimer) {\n                doUseTimer(updateClasses2Create, primordial);\n            }\n            else {\n                doCssCreate.start(updateClasses2Create);\n            }\n        }\n        catch (err) {\n            console_log.consoleLog("error", { err: err });\n        }\n    },\n};\n\n;// CONCATENATED MODULE: ./src/functions/debugg_options.ts\n\nconst debugg_options_values = ValuesSingleton.getInstance();\nconst debugg_options = {\n    changeDebugOption(option) {\n        debugg_options_values.isDebug = option || !debugg_options_values.isDebug;\n    },\n    changeUseTimerOption(option) {\n        debugg_options_values.useTimer = option || !debugg_options_values.useTimer;\n    },\n    setTimeBetweenReCreate(time) {\n        debugg_options_values.timeBetweenReCreate = time;\n    },\n};\n\n;// CONCATENATED MODULE: ./src/functions/manage_abreviations.ts\n\n\n\nconst manage_abreviations_values = ValuesSingleton.getInstance();\nconst manage_abreviations = {\n    pushAbreviationsValues(abreviationsValues) {\n        try {\n            let prevIgnoredAbreviationsValues = [];\n            Object.keys(abreviationsValues).forEach((key) => {\n                manage_abreviations_values.abreviationsValues[key] = abreviationsValues[key];\n                prevIgnoredAbreviationsValues = manage_abreviations_values.alreadyCreatedClasses.filter((aC) => {\n                    return aC.includes(key);\n                });\n            });\n            if (prevIgnoredAbreviationsValues.length > 0) {\n                cssCreate.cssCreate(prevIgnoredAbreviationsValues);\n            }\n        }\n        catch (err) {\n            console_log.consoleLog("error", { err: err });\n        }\n    },\n    pushAbreviationsClasses(abreviationsClasses) {\n        let prevIgnoredAbreviationsValues = [];\n        try {\n            Object.keys(abreviationsClasses).forEach((key) => {\n                manage_abreviations_values.abreviationsClasses[key] = abreviationsClasses[key];\n                prevIgnoredAbreviationsValues = manage_abreviations_values.alreadyCreatedClasses.filter((aC) => {\n                    return aC.includes(key);\n                });\n            });\n            if (prevIgnoredAbreviationsValues.length > 0) {\n                cssCreate.cssCreate(prevIgnoredAbreviationsValues);\n            }\n            else {\n                cssCreate.cssCreate();\n            }\n        }\n        catch (err) {\n            console_log.consoleLog("error", { err: err });\n        }\n    },\n    getAbreviationsClasses() {\n        console_log.consoleLog("info", {\n            abreviationsClasses: manage_abreviations_values.abreviationsClasses,\n        });\n        return manage_abreviations_values.abreviationsClasses;\n    },\n    getAbreviationsValues() {\n        console_log.consoleLog("info", {\n            abreviationsValues: manage_abreviations_values.abreviationsValues,\n        });\n        return manage_abreviations_values.abreviationsValues;\n    },\n    updateAbreviationsClass(abreviationsClass, value) {\n        try {\n            if (manage_abreviations_values.abreviationsClasses[abreviationsClass.toString()]) {\n                manage_abreviations_values.abreviationsClasses[abreviationsClass] = value;\n                let classesToUpdate = [];\n                for (let createdClass of manage_abreviations_values.alreadyCreatedClasses) {\n                    if (createdClass.includes(abreviationsClass)) {\n                        classesToUpdate.push(createdClass);\n                    }\n                }\n                if (classesToUpdate.length > 0) {\n                    cssCreate.cssCreate(classesToUpdate);\n                }\n            }\n            else {\n                throw new Error(`There is no abreviationsClass named ${abreviationsClass}.`);\n            }\n        }\n        catch (err) {\n            console_log.consoleLog("error", { err: err });\n        }\n    },\n    updateAbreviationsValue(abreviationsValue, value) {\n        try {\n            if (manage_abreviations_values.abreviationsValues[abreviationsValue.toString()]) {\n                manage_abreviations_values.abreviationsValues[abreviationsValue] = value;\n                let classesToUpdate = [];\n                for (let createdClass of manage_abreviations_values.alreadyCreatedClasses) {\n                    if (createdClass.includes(abreviationsValue)) {\n                        classesToUpdate.push(createdClass);\n                    }\n                }\n                if (classesToUpdate.length > 0) {\n                    cssCreate.cssCreate(classesToUpdate);\n                }\n            }\n            else {\n                throw new Error(`There is no abreviationsValue named ${abreviationsValue}.`);\n            }\n        }\n        catch (err) {\n            console_log.consoleLog("error", { err: err });\n        }\n    },\n};\n\n;// CONCATENATED MODULE: ./src/functions/manage_bps.ts\n\n\n\nconst manage_bps_values = ValuesSingleton.getInstance();\nconst manage_bps = {\n    pushBPS(bps) {\n        try {\n            for (let nb of bps) {\n                let bp = manage_bps_values.bps.find((b) => b.bp === nb.bp);\n                if (bp) {\n                    bp.value = nb.value;\n                    bp.class2Create = "";\n                }\n                else {\n                    manage_bps_values.bps.push({\n                        bp: nb.bp,\n                        value: nb.value,\n                    });\n                }\n            }\n            cssCreate.cssCreate();\n        }\n        catch (err) {\n            console_log.consoleLog("error", { err: err });\n        }\n    },\n    getBPS() {\n        console_log.consoleLog("info", { bps: manage_bps_values.bps });\n        return manage_bps_values.bps;\n    },\n};\n\n;// CONCATENATED MODULE: ./src/functions/manage_classes.ts\n\n\n\nconst manage_classes_values = ValuesSingleton.getInstance();\nconst manage_classes = {\n    getAlreadyCreatedClasses() {\n        console_log.consoleLog("info", {\n            alreadyCreatedClasses: manage_classes_values.alreadyCreatedClasses,\n        });\n        return manage_classes_values.alreadyCreatedClasses;\n    },\n    updateClasses(classesToUpdate) {\n        cssCreate.cssCreate(classesToUpdate);\n    },\n};\n\n;// CONCATENATED MODULE: ./src/functions/manage_colors.ts\n\n\n\nconst manage_colors_values = ValuesSingleton.getInstance();\nconst manage_colors = {\n    pushColors(newColors) {\n        try {\n            Object.keys(newColors).forEach((key) => {\n                manage_colors_values.colors[key] = newColors[key].replace("!important" || 0 || 0, "");\n            });\n            for (let color in newColors) {\n                let classesToUpdate = [];\n                for (let createdClass of manage_colors_values.alreadyCreatedClasses) {\n                    if (createdClass.includes(color)) {\n                        classesToUpdate.push(createdClass);\n                    }\n                }\n                if (classesToUpdate.length > 0) {\n                    cssCreate.cssCreate(classesToUpdate);\n                }\n            }\n        }\n        catch (err) {\n            console_log.consoleLog("error", { err: err });\n        }\n    },\n    getColors() {\n        console_log.consoleLog("info", { colors: manage_colors_values.colors });\n        return manage_colors_values.colors;\n    },\n    getColorsNames() {\n        const colorsNames = [];\n        Object.keys(manage_colors_values.colors).forEach((key) => {\n            colorsNames.push(key);\n        });\n        return colorsNames;\n    },\n    getColorValue(color) {\n        console_log.consoleLog("info", {\n            color: color,\n            colorValue: manage_colors_values.colors[color],\n        });\n        return manage_colors_values.colors[color];\n    },\n    updateColor(color, value) {\n        try {\n            if (manage_colors_values.colors[color.toString()]) {\n                manage_colors_values.colors[color] = value.replace("!important" || 0 || 0, "");\n                let classesToUpdate = [];\n                for (let createdClass of manage_colors_values.alreadyCreatedClasses) {\n                    if (createdClass.includes(color)) {\n                        classesToUpdate.push(createdClass);\n                    }\n                }\n                if (classesToUpdate.length > 0) {\n                    cssCreate.cssCreate(classesToUpdate);\n                }\n            }\n            else {\n                throw new Error(`There is no color named ${color}.`);\n            }\n        }\n        catch (err) {\n            console_log.consoleLog("error", { err: err });\n        }\n    },\n    deleteColor(color) {\n        try {\n            if (!!manage_colors_values.colors[color.toString()]) {\n                delete manage_colors_values.colors[color];\n            }\n            else {\n                throw new Error(`There is no color named ${color}.`);\n            }\n        }\n        catch (err) {\n            console_log.consoleLog("error", { err: err });\n        }\n    },\n    clearAllColors() {\n        manage_colors_values.colors = {};\n        console_log.consoleLog("info", { colors: manage_colors_values.colors });\n    },\n};\n\n;// CONCATENATED MODULE: ./src/functions/manage_combos.ts\n\n\n\nconst manage_combos_values = ValuesSingleton.getInstance();\nconst manage_combos = {\n    pushCombos(combos) {\n        try {\n            let prevIgnoredCombosValues = [];\n            Object.keys(combos).forEach((key) => {\n                manage_combos_values.combos[key] =\n                    typeof combos[key] === "string"\n                        ? combos[key].split(" ")\n                        : combos[key]\n                            .map((c) => {\n                            return c.split(" ").flat();\n                        })\n                            .flat();\n                prevIgnoredCombosValues = manage_combos_values.alreadyCreatedClasses.filter((aC) => {\n                    return aC.includes(key);\n                });\n            });\n            if (prevIgnoredCombosValues.length > 0) {\n                cssCreate.cssCreate(prevIgnoredCombosValues);\n            }\n            else {\n                cssCreate.cssCreate();\n            }\n        }\n        catch (err) {\n            console_log.consoleLog("error", { err: err });\n        }\n    },\n    getCombos() {\n        console_log.consoleLog("info", { combos: manage_combos_values.combos });\n        return manage_combos_values.combos;\n    },\n    updateCombo(combo, newValues) {\n        try {\n            if (manage_combos_values.combos[combo.toString()]) {\n                manage_combos_values.combos[combo] = newValues;\n                let classes2Delete = [];\n                for (let createdClass of manage_combos_values.alreadyCreatedClasses) {\n                    if (createdClass.includes(combo)) {\n                        classes2Delete.push(createdClass);\n                    }\n                }\n                if (classes2Delete.length > 0) {\n                    for (let class2Delete of classes2Delete) {\n                        manage_combos_values.sheet.deleteRule([...manage_combos_values.sheet.cssRules].findIndex((cssRule) => {\n                            return cssRule.cssText.includes(class2Delete);\n                        }));\n                        manage_combos_values.alreadyCreatedClasses = manage_combos_values.alreadyCreatedClasses.filter((aC) => {\n                            return aC !== class2Delete;\n                        });\n                    }\n                    cssCreate.cssCreate();\n                }\n            }\n            else {\n                throw new Error(`There is no combo named ${combo}.`);\n            }\n        }\n        catch (err) {\n            console_log.consoleLog("error", { err: err });\n        }\n    },\n};\n\n;// CONCATENATED MODULE: ./src/functions/manage_CSSNamesParsed.ts\n\n\n\nconst manage_CSSNamesParsed_values = ValuesSingleton.getInstance();\nconst manage_CSSNamesParsed = {\n    pushCssNamesParsed(cssNamesParsed) {\n        try {\n            Object.keys(cssNamesParsed).forEach((key) => {\n                manage_CSSNamesParsed_values.cssNamesParsed[key] = cssNamesParsed[key];\n            });\n            cssCreate.cssCreate();\n        }\n        catch (err) {\n            console_log.consoleLog("error", { err: err });\n        }\n    },\n    getCssNamesParsed() {\n        console_log.consoleLog("info", { cssNamesParsed: manage_CSSNamesParsed_values.cssNamesParsed });\n        return manage_CSSNamesParsed_values.cssNamesParsed;\n    },\n    updateCssNamesParsed(cssNameParsed, value) {\n        try {\n            if (manage_CSSNamesParsed_values.cssNamesParsed[cssNameParsed.toString()]) {\n                manage_CSSNamesParsed_values.cssNamesParsed[cssNameParsed] = value;\n                let classesToUpdate = [];\n                for (let createdClass of manage_CSSNamesParsed_values.alreadyCreatedClasses) {\n                    if (createdClass.includes(cssNameParsed)) {\n                        classesToUpdate.push(createdClass);\n                    }\n                }\n                if (classesToUpdate.length > 0) {\n                    cssCreate.cssCreate(classesToUpdate);\n                }\n            }\n            else {\n                throw new Error(`There is no cssNameParsed named ${cssNameParsed}.`);\n            }\n        }\n        catch (err) {\n            console_log.consoleLog("error", { err: err });\n        }\n    },\n};\n\n;// CONCATENATED MODULE: ./src/functions/utility_configurations.ts\n\n\nconst utility_configurations_values = ValuesSingleton.getInstance();\nconst utility_configurations = {\n    changeImportantActive(option) {\n        utility_configurations_values.importantActive = option || !utility_configurations_values.importantActive;\n        cssCreate.cssCreate();\n    },\n};\n\n;// CONCATENATED MODULE: ./src/service.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass BootstrapExpandedFeaturesService {\n    constructor() {\n        Object.assign(this, ValuesSingleton.getInstance(), abreviation_traductors, color_transform, console_log, css_camel, cssCreate, debugg_options, manage_abreviations, manage_bps, manage_classes, manage_colors, manage_combos, manage_CSSNamesParsed, manage_CSSRules, manage_sheet, utility_configurations);\n        manage_sheet.checkSheet();\n    }\n}\n\n;// CONCATENATED MODULE: ./src/index.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst service = new BootstrapExpandedFeaturesService();\nconst src_values = ValuesSingleton.getInstance();\nconst functions = {\n    ...abreviation_traductors,\n    ...color_transform,\n    ...console_log,\n    ...css_camel,\n    ...cssCreate,\n    ...debugg_options,\n    ...manage_abreviations,\n    ...manage_bps,\n    ...manage_classes,\n    ...manage_colors,\n    ...manage_combos,\n    ...manage_CSSNamesParsed,\n    ...manage_CSSRules,\n    ...manage_sheet,\n    ...utility_configurations,\n};\nconst src_cssCreate = (updateClasses2Create = null, primordial = false) => service.cssCreate(updateClasses2Create, primordial);\nconst createCSSRules = (rule) => service.createCSSRules(rule);\nconst colorToRGB = (color) => service.colorToRGB(color);\nconst RGBToRGBA = (rgb, alpha) => service.RGBToRGBA(rgb, alpha);\nconst parseRGB = (rgba) => service.parseRGB(rgba);\nconst HexToRGB = (Hex) => service.HexToRGB(Hex);\nconst HSLToRGB = (HSL) => service.HSLToRGB(HSL);\nconst HWBToRGB = (HWB) => service.HWBToRGB(HWB);\nconst shadeTintColor = (rgb, percent) => service.shadeTintColor(rgb, percent);\nconst cssValidToCamel = (st) => service.cssValidToCamel(st);\nconst camelToCSSValid = (st) => service.camelToCSSValid(st);\nconst pushCssNamesParsed = (cssNamesParsed) => service.pushCssNamesParsed(cssNamesParsed);\nconst pushBPS = (bps) => service.pushBPS(bps);\nconst pushColors = (newColors) => service.pushColors(newColors);\nconst pushAbreviationsValues = (abreviationsValues) => service.pushAbreviationsValues(abreviationsValues);\nconst pushAbreviationsClasses = (abreviationsClasses) => service.pushAbreviationsClasses(abreviationsClasses);\nconst pushCombos = (combos) => service.pushCombos(combos);\nconst getColors = () => service.getColors();\nconst getBPS = () => service.getBPS();\nconst getAbreviationsClasses = () => service.getAbreviationsClasses();\nconst getAbreviationsValues = () => service.getAbreviationsValues();\nconst getCombos = () => service.getCombos();\nconst getCssNamesParsed = () => service.getCssNamesParsed();\nconst getColorsNames = () => service.getColorsNames();\nconst getColorValue = (color) => service.getColorValue(color);\nconst getAlreadyCreatedClasses = () => service.getAlreadyCreatedClasses();\nconst getSheet = () => service.getSheet();\nconst updateColor = (color, value) => service.updateColor(color, value);\nconst updateAbreviationsClass = (abreviationsClass, value) => service.updateAbreviationsClass(abreviationsClass, value);\nconst updateAbreviationsValue = (abreviationsValue, value) => service.updateAbreviationsValue(abreviationsValue, value);\nconst updateCombo = (combo, values) => service.updateCombo(combo, values);\nconst updateCssNamesParsed = (cssNameParsed, value) => service.updateCssNamesParsed(cssNameParsed, value);\nconst updateClasses = (classesToUpdate) => service.updateClasses(classesToUpdate);\nconst deleteColor = (color) => service.deleteColor(color);\nconst clearAllColors = () => service.clearAllColors();\nconst changeImportantActive = () => service.changeImportantActive();\nconst changeDebugOption = () => service.changeDebugOption();\nconst changeUseTimerOption = () => service.changeUseTimerOption();\nconst setTimeBetweenReCreate = (time) => service.setTimeBetweenReCreate(time);\nconst unbefysize = (value) => service.unbefysize(value);\nconst befysize = (value) => service.befysize(value);\nconst consoleLog = (type = "log", thing, style = src_values.styleConsole, line = null, stoper = !src_values.isDebug) => service.consoleLog(type, thing, style, line, stoper);\nconst consoleParser = (config) => service.consoleParser(config);\nif (window) {\n    window.addEventListener("load", (event) => {\n        let colors;\n        src_cssCreate();\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///440\n'
        );
      },
    },
    __webpack_require__ = {
      d: (Q, F) => {
        for (var U in F)
          __webpack_require__.o(F, U) &&
            !__webpack_require__.o(Q, U) &&
            Object.defineProperty(Q, U, { enumerable: !0, get: F[U] });
      },
      o: (Q, F) => Object.prototype.hasOwnProperty.call(Q, F),
      r: (Q) => {
        "undefined" != typeof Symbol &&
          Symbol.toStringTag &&
          Object.defineProperty(Q, Symbol.toStringTag, { value: "Module" }),
          Object.defineProperty(Q, "__esModule", { value: !0 });
      },
    },
    __webpack_exports__ = {};
  __webpack_modules__[440](0, __webpack_exports__, __webpack_require__),
    (bootstrapExpandedFeatures = __webpack_exports__);
})();
if (!colors) {
  let colors = {};
}
Object.assign(window, bootstrapExpandedFeatures);
pushColors(colors);
